Spring概述
    ·Spring优点
      -方便解耦，简化开发，将对象创建和依赖关系维护交给spring管理
      -面向切面编程，方便实现拦截，监控等功能
      -声明事务支持，只需要通过配置就可以完成对事务的管理
      -方便程测试
      -方便集成框架
      -降低了javaEE
      -使用难度，对API进行了封装

    ·springioc底层实现原理
      传统方式开发，没有面向接口编程，或在web创建接口实现类，耦合严重
      使用ocp（open-close）原则（对程序扩展open，修改程序是close）
      使用了工厂模式，spring使用工厂进行创建对象
      spring使用工厂+反射+配置文件进行解耦
       原理是先创建配置文件，定义返回的class，再在工厂类class里写方法返回一个实例对象，通过反射生成实例对象
      IOC:控制反转的概念，将手动创建实例对象的控制权，交给Spring创建。
      DI:依赖注入，在spring创建对象的过程中，吧这个对象所依赖的属性注入进去

    ·springBean管理
      一：XML方式
        三种实例化Bean的方式
        1.使用类构造器实例化（默认无参）
        2.使用静态工厂方法实例化（简单工厂模式）
        3.使用实例工厂方法实例化（工厂方法模式）
          Spring的属性注入
            三种方式：
                构造函数注入
                属性setter注入
                p名称空间，（spring2.5开始引入）
                接口注入
            spring支持前三种

      二：注解方式
        Spring2.5引入注解
        -@Component 描述Spring框架中Bean
        -@Repository 用于对DAO层实现类进行标注
        -@Service 对Service实现类进行标注
        -@Controller 对Controller实现类进行标注
        -@Resource 对JSR-250的注解（和@Autowired注解功能类似）

     ·Spring Aop 面向切面编程，采用 横向抽取 动态代理机制，摒弃传统 纵向继承，进行事务监察，安全管理
            JDK动态代理 只能对实现接口的类进行代理
            CGLIB动态代理 可以对未实现接口的类进行代理 采用底层字节码技术，生成一个子类
        -Spring 在运行期生成代理对象，不需要特使编译器
        -Spring Aop的地城就是通过JDK动态代理或CGLIB动态代理技术对目标的Bean执行横向织入
            若目标实现了接口使用JDK的Proxy类进行代理
            若对象目标没有实现接口，使用CGLIB库生成目标对象的子类。
            程序中优先对接口创建代理，便于程序解耦
            标记为final的方法，不能被代理，因为无法进被继承，无法被覆盖。
            Spring只支持方连接点，不提供属性连接点，只增强方法

        -Spring增强类型
            前置通知，在目标方法执行后进行增强
            后置通知，在目标方法执行后进行增强
            环绕通知，在目标方法前后都会执行的通知
            异常抛出通知，抛出异常后实施增强
            引介通知，在目标类中添加一些新的方法和属性，spring中不用，因为只对方法进行增强
        -spring 切面类型
            Advisor 代表一般切面，对目标类所有方法进行拦截 不够灵活
            PointcutAdvisor 代表具有切点的切面，可以指定拦截目标那个方法
            IntroductionAdvisor 代表引介切面，针对引介通知使用
        -Spring Aop 可以自动代理
            根据bean名称创建代理对象
            根据Advisor本身包含信息创建代理对象
            根据注解创建代理

     ·AspectJ简介
        可以使用注解和xml进行开发
        是一个基于JAVA语言的AOP框架
        Spring2.0之后新增了岁AspectJ切点表达式支持
        新版本Spring建议使用AspectJ开发
        需要导入 spring-aspects  aspectj的包
